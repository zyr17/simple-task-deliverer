# default configs, will load as default. if has task specified configs, just
# create new, all newly defined configs will override default configs here.


# The default number of tasks running on one worker with only CPU.
cpu_thread: 0

# The default number of tasks running on one GPU.
gpu_thread: 8

# worker IPs. Can use `[a-b]` to represent multiple IPs. e.g. 192.168.0.[1-10]
# Use hostname is OK, but it is not recommended to use IP and hostname 
# simultaneously, as one same worker may be treated as two different workers.
# if want to specify cpu and gpu threads number, write as: 
# IP: { cpu_thread: x, gpu_thread: y}. see examples below. 
ip_include:
  - 192.168.[0-1].[1-4]  # include multiple IPs
  - worker[15-19]        # include multiple hostnames
  - 192.168.2.[2-5]:     # specify CPU only workers
      cpu_thread: 4
      gpu_thread: 0
  - worker20:            # specify a GPU only worker
      cpu_thread: 0
      gpu_thread: 4


# excluded IPs. Only IPs shown in include and not shown in exclude will be
# treated as a worker. 
ip_exclude:
  - 192.168.0.1
  # - node27

# The prefix to be added when running the task. It's added before the real task
# command like `TASKDELIVER0_1=; real_cmd`. The rule to add device and thread
# number can be found in `utils.get_cmd_prefix`.
command_prefix: TASKDELIVER

# Set false to add `StrictHostKeyChecking=no` to avoid ssh warning when
# connecting to new machines.
ssh_strict_host_key_checking: false

# when not empty, use specified username in ssh.
ssh_username: ''

# the port for ssh. In normal situations, just remain it as 22.
ssh_port: 22

# When tasks are using GPU, and running in a public machine, set an approximate
# GPU memory usage to avoid MLE. You can also use it to avoid using GPUs which
# is used by others. 
expected_gpu_memory_usage: 0

# when checking GPU availability, users listed below will be trated as not
# exist. If other user running processes on GPU, that GPU will be treated as
# not available.
gpu_check_ignore_users:
  - root
  - gdm
  - mdm

# When checking status of workers, now many threads will work simultaneously. 
# An approximate usage of memory per thread is 3MB in Ubuntu 20.04+Python3.7, 
# set it with a smaller number when master has small memory. 
parallel_num: 64

# folder to save log files, which contains output of every task. folder name
# is relative to config file path, if use ./, will save logs in the same
# folder of config. it is recommended to create folder and put config in that
# folder, then configs and logs will all in the folder. 
log_folder: ./test

# The class name of the task generator to use.
task_generator: SleepGenerator

# when set true, output debugging messages.
verbose: false

# when set true, only show ssh commands, and not really sending them.
testmode: false

# when true, logs are saved by remote worker. recommended when using nas, so no need
# to keep multiple ssh links from master.
remote_save_log: false

# sleep seconds after getting worker status. to avoid mistakenly send two tasks
# into one worker thread, it is recommended to set a positive interger. 
sleep_after_status: 3

# sleep seconds after sending a task. If network have rate limit, it is recommended to
# set a positive float number to avoid be banned from NATs and firewalls.
sleep_after_task: 0.5

# arguments used in SleepGenerator. When using other task generator, add
# corresponding arguments below, or write new config and add them.
sleep_time: 30s
sleep_task_count: 15

